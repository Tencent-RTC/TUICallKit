import Context from "android.content.Context";
import Manifest from "android.Manifest";
import Intent from "android.content.Intent";
import CallBridge from "com.tencent.qcloud.tuikit.tuicallkit.manager.hybird.CallBridge";
import TUICallEngine from "com.tencent.cloud.tuikit.engine.call.TUICallEngine";
import TUICallObserver from "com.tencent.cloud.tuikit.engine.call.TUICallObserver";
import FloatWindowManager from "com.trtc.tuikit.common.ui.floatwindow.FloatWindowManager";
import PermissionRequester from "com.tencent.qcloud.tuicore.permission.PermissionRequester";
import {
  MediaType,
  LoginOptions,
  CallsOptions,
  InviteUserOptions,
  JoinOptions,
  CallbackOptions,
  SelfInfoOptions,
  MultiDeviceOptions,
  PermissionOptions,
} from "../interface.uts";
import {
  Callback,
  ICallback,
  ICallObserve,
  TCallObserver,
  TFloatWindowObserver,
  NAME,
  ParamsCovert,
} from "./utils/index.uts";

const context: Context = UTSAndroid.getAppContext() as Context;

const listenerMap = new Map<string, Array<(res: any) => void>>();

export class CallEngine {
  callBridge: CallBridge;
  callObserver: TUICallObserver;
  floatWindowObserver: TFloatWindowObserver;

  constructor() {
    console.log(`${NAME.PREFIX} constructor.start`);
    const callObserve: ICallObserve = {
      listener: (eventName: string, data: any) => {
        listenerMap.get(eventName)?.forEach((cb) => {
          cb(data);
        });
      },
    };
    this.callBridge = CallBridge.instance;
    this.callObserver = new TCallObserver(callObserve);
    this.floatWindowObserver = new TFloatWindowObserver(callObserve);
  }

  public login(options: LoginOptions) {
    console.log(`${NAME.PREFIX} login.start, data: ${JSON.stringify(options)}`);
    const cb: ICallback = {
      apiName: "login",
      success: () => {
        options?.success?.();
      },
      fail: (errCode: number, errMsg: string) => {
        options?.fail?.(errCode, errMsg);
      },
    };

    this.callBridge.login(
      context,
      options.SDKAppID.toInt(),
      options.userID,
      options.userSig,
      11,
      14,
      10,
      new Callback(cb)
    );
  }

  public logout(options: CallbackOptions) {
    console.log(
      `${NAME.PREFIX} logout.start, data: ${JSON.stringify(options)}`
    );
    const cb: ICallback = {
      apiName: "logout",
      success: () => {
        options?.success?.();
      },
      fail: (errCode: number, errMsg: string) => {
        options?.fail?.(errCode, errMsg);
      },
    };
    this.callBridge.logout(new Callback(cb));
  }

  public calls(options: CallsOptions) {
    console.log(`${NAME.PREFIX} calls.start, data: ${JSON.stringify(options)}`);
    const cb: ICallback = {
      apiName: "calls",
      success: () => {
        options?.success?.();
      },
      fail: (errCode: number, errMsg: string) => {
        options?.fail?.(errCode, errMsg);
      },
    };

    this.callBridge.calls(
      options.userIDList,
      ParamsCovert.covertMediaType(options.mediaType),
      ParamsCovert.covertCallPrams(options.callParams),
      new Callback(cb)
    );
  }

  public inviteUser(options: InviteUserOptions) {
    console.log(`${NAME.PREFIX} inviteUser.start, data: ${options}`);
    const cb: ICallback = {
      apiName: "inviteUser",
      success: () => {
        options?.success?.();
      },
      fail: (errCode: number, errMsg: string) => {
        options?.fail?.(errCode, errMsg);
      },
    };
    this.callBridge.inviteUser(options.userIDList, new Callback(cb));
  }

  public join(options: JoinOptions) {
    console.log(`${NAME.PREFIX} join.start, data: ${options}`);
    const cb: ICallback = {
      apiName: "join",
      success: () => {
        options?.success?.();
      },
      fail: (errCode: number, errMsg: string) => {
        options?.fail?.(errCode, errMsg);
      },
    };
    this.callBridge.join(options.callID, new Callback(cb));
  }

  public accept(options?: CallbackOptions) {
    console.log(`${NAME.PREFIX} accept.start, data: ${options}`);
    const cb: ICallback = {
      apiName: "accept",
      success: () => {
        options?.success?.();
      },
      fail: (errCode: number, errMsg: string) => {
        options?.fail?.(errCode, errMsg);
      },
    };
    this.callBridge.accept(new Callback(cb));
  }

  public hangup(options?: CallbackOptions) {
    console.log(`${NAME.PREFIX} hangup.start, data: ${options}`);
    const cb: ICallback = {
      apiName: "hangup",
      success: () => {
        options?.success?.();
      },
      fail: (errCode: number, errMsg: string) => {
        options?.fail?.(errCode, errMsg);
      },
    };
    this.callBridge.hangup(new Callback(cb));
  }

  public reject(options?: CallbackOptions) {
    console.log(`${NAME.PREFIX} reject.start, data: ${options}`);
    const cb: ICallback = {
      apiName: "reject",
      success: () => {
        options?.success?.();
      },
      fail: (errCode: number, errMsg: string) => {
        options?.fail?.(errCode, errMsg);
      },
    };
    this.callBridge.reject(new Callback(cb));
  }

  public openCamera(options?: CallbackOptions) {
    console.log(`${NAME.PREFIX} openCamera.start, data: ${options}`);
    const cb: ICallback = {
      apiName: "openCamera",
      success: () => {
        options?.success?.();
      },
      fail: (errCode: number, errMsg: string) => {
        options?.fail?.(errCode, errMsg);
      },
    };
    this.callBridge.openCamera(new Callback(cb));
  }

  public closeCamera() {
    console.log(`${NAME.PREFIX} closeCamera.start`);
    this.callBridge.closeCamera();
  }

  public switchCamera(camera: number) {
    console.log(`${NAME.PREFIX} switchCamera.start, data: ${camera}`);
    this.callBridge.switchCamera(ParamsCovert.covertCameraType(camera));
  }

  public openMicrophone(options?: CallbackOptions) {
    console.log(`${NAME.PREFIX} openMicrophone.start, data: ${options}`);
    const cb: ICallback = {
      apiName: "openMicrophone",
      success: () => {
        options?.success?.();
      },
      fail: (errCode: number, errMsg: string) => {
        options?.fail?.(errCode, errMsg);
      },
    };

    this.callBridge.openMicrophone(new Callback(cb));
  }

  public closeMicrophone() {
    this.callBridge.closeMicrophone();
  }

  public selectAudioPlaybackDevice(device: number) {
    console.log(
      `${NAME.PREFIX} selectAudioPlaybackDevice.start, data: ${device}`
    );
    this.callBridge.selectAudioPlaybackDevice(
      ParamsCovert.covertAudioPlaybackDevice(device)
    );
  }

  public setSelfInfo(options: SelfInfoOptions) {
    console.log(
      `${NAME.PREFIX} setSelfInfo.start, data: ${JSON.stringify(options)}`
    );

    const cb: ICallback = {
      apiName: "setSelfInfo",
      success: () => {
        options?.success?.();
      },
      fail: (errCode: number, errMsg: string) => {
        options?.fail?.(errCode, errMsg);
      },
    };

    this.callBridge.setSelfInfo(
      options.nickName,
      options.avatar,
      new Callback(cb)
    );
  }

  public setCallingBell(filePath: string) {
    console.log(`${NAME.PREFIX} setCallingBell.start, data: ${filePath}`);
    this.callBridge.setCallingBell(filePath);
  }

  public enableMuteMode(enable: boolean) {
    console.log(`${NAME.PREFIX} enableMuteMode.start, data: ${enable}`);
    this.callBridge.enableMuteMode(enable);
  }

  public enableFloatWindow(enable: boolean) {
    console.log(`${NAME.PREFIX} enableFloatWindow.start, data: ${enable}`);
    this.callBridge.enableFloatWindow(enable);
  }

  public enableVirtualBackground(enable: boolean) {
    console.log(
      `${NAME.PREFIX} enableVirtualBackground.start, data: ${enable}`
    );
    this.callBridge.enableVirtualBackground(enable);
  }

  public setScreenOrientation(orientation: number) {
    console.log(
      `${NAME.PREFIX} setScreenOrientation.start, data: ${orientation}`
    );
    this.callBridge.setScreenOrientation(orientation.toInt());
  }

  // only support 0-close 3-high
  public setBlurBackground(level: number) {
    console.log(`${NAME.PREFIX} setBlurBackground.start, data: ${level}`);
    this.callBridge.setBlurBackground(level.toInt());
  }

  public startFloatWindow(options: CallbackOptions) {
    console.log(`${NAME.PREFIX} startFloatWindow.start`);
    this.callBridge.startFloatWindow();
    const floatPermission = PermissionRequester.newInstance(
      PermissionRequester.FLOAT_PERMISSION
    ).has();
    if (floatPermission) {
      options?.success?.();
      console.log(`${NAME.PREFIX} startFloatWindow.success`);
    } else {
      options?.fail?.(0, "");
      console.error(`${NAME.PREFIX} startFloatWindow.fail`);
    }
    FloatWindowManager.sharedInstance().addObserver(this.floatWindowObserver);
  }

  public stopFloatWindow() {
    console.log(`${NAME.PREFIX} stopFloatWindow.start`);
    this.callBridge.stopFloatWindow();
  }

  public enableMultiDeviceAbility(options: MultiDeviceOptions) {
    console.log(
      `${NAME.PREFIX} enableMultiDeviceAbility.start, data: ${options}`
    );
    const cb: ICallback = {
      apiName: "enableMultiDeviceAbility",
      success: () => {
        options?.success?.();
      },
      fail: (errCode: number, errMsg: string) => {
        options?.fail?.(errCode, errMsg);
      },
    };

    this.callBridge.enableMultiDeviceAbility(options.enable, new Callback(cb));
  }

  public bringAppToForeground() {
    console.log(
      `${
        NAME.PREFIX
      } bringAppToForeground.start, data: ${UTSAndroid.getAppContext()} | ${
        UTSAndroid.getUniActivity()!.javaClass
      }`
    );
    const intent = new Intent(
      UTSAndroid.getAppContext()!,
      UTSAndroid.getUniActivity()!.javaClass
    );
    intent.addFlags(
      Intent.FLAG_ACTIVITY_NEW_TASK | Intent.FLAG_ACTIVITY_REORDER_TO_FRONT
    );
    UTSAndroid.getUniActivity()!.startActivity(intent);
  }

  public hasPermission(options: PermissionOptions): void {
    console.log(
      `${NAME.PREFIX} hasPermission.start, data: ${JSON.stringify(options)}`
    );

    const cb: ICallback = {
      apiName: "hasPermission",
      success: () => {
        console.log(`${NAME.PREFIX} hasPermission.success`);
        options?.success?.();
      },
      fail: (errCode: number, errMsg: string) => {
        console.log(
          `${NAME.PREFIX} hasPermission.fail, data: ${errCode} ${errMsg}`
        );
        options?.fail?.(errCode, errMsg);
      },
    };

    this.callBridge.hasPermission(
      ParamsCovert.covertMediaType(options.type),
      new Callback(cb)
    );
  }

  @UTSJS.keepAlive
  public on(eventName: string, listener: (res: any) => void): void {
    if (listenerMap.size === 0) {
      TUICallEngine.createInstance(context).addObserver(this.callObserver);
    }
    const listeners: Array<(res: any) => void> = [listener];
    listenerMap.get(eventName)?.forEach((item) => {
      listeners.push(item);
    });
    listenerMap.set(eventName, listeners);
  }

  public off(eventName: string): void {
    listenerMap.delete(eventName);
    if (listenerMap.size === 0) {
      TUICallEngine.createInstance(context).removeObserver(this.callObserver);
      FloatWindowManager.sharedInstance().removeObserver(
        this.floatWindowObserver
      );
    }
  }
}
