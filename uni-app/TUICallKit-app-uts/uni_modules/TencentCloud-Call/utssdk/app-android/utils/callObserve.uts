import List from 'kotlin.collections.List';
import Map from 'kotlin.collections.Map';
import TUICommonDefine from 'com.tencent.cloud.tuikit.engine.common.TUICommonDefine';
import TUICallDefine from 'com.tencent.cloud.tuikit.engine.call.TUICallDefine';
import TUICallObserver from 'com.tencent.cloud.tuikit.engine.call.TUICallObserver';
import FloatWindowObserver from 'com.trtc.tuikit.common.ui.floatwindow.FloatWindowObserver';
import { NAME } from './const.uts';


function covertMediaType(mediaType : TUICallDefine.MediaType) : number {
  switch (mediaType) {
    case TUICallDefine.MediaType.Video:
      return 2;
    case TUICallDefine.MediaType.Audio:
      return 1;
    default:
      return 0;
  }
}

export type ICallObserve = {
  listener : (eventType : string, data : any) => void
}
export class TCallObserver extends TUICallObserver {
  private listener : (eventType : string, data : any) => void;

  constructor(options : ICallObserve) {
    super();
    this.listener = options.listener;
    console.log(`${NAME.PREFIX} TCallObserver ok`);
  }

  override onError(code : Int, message : string) {
    console.error(`${NAME.PREFIX} onError ${JSON.stringify({ code, message })}`);
    this.listener('onError', { code, message });
  }

  override onCallReceived(callId : string, callerId : string, calleeIdList : List<string>, mediaType : TUICallDefine.MediaType, info : TUICallDefine.CallObserverExtraInfo) {
    console.log(`${NAME.PREFIX} onCallReceived ${JSON.stringify({ callID: callId, callerId, calleeIdList, mediaType: covertMediaType(mediaType), info })}`);
    this.listener('onCallReceived', { callID: callId, callerID: callerId, calleeIDList: calleeIdList, mediaType: covertMediaType(mediaType), info });
  }

  override onCallBegin(callId : string, mediaType : TUICallDefine.MediaType, info : TUICallDefine.CallObserverExtraInfo) {
    console.log(`${NAME.PREFIX} onCallBegin ${JSON.stringify({ callID: callId, mediaType: covertMediaType(mediaType), info })}`);
    this.listener('onCallBegin', { callID: callId, mediaType: covertMediaType(mediaType), info });
  }

  override onCallEnd(callId : string, mediaType : TUICallDefine.MediaType, reason : TUICallDefine.CallEndReason, userId : string, totalTime : Long, info : TUICallDefine.CallObserverExtraInfo) {
    console.log(`${NAME.PREFIX} onCallEnd ${JSON.stringify({ callID: callId, mediaType: covertMediaType(mediaType), reason, userID: userId, totalTime, info })}`);
    this.listener('onCallEnd', { callID: callId, mediaType: covertMediaType(mediaType), reason, userID: userId, totalTime, info });
  }

  override onCallNotConnected(callId : string, mediaType : TUICallDefine.MediaType, reason : TUICallDefine.CallEndReason, userId : string, info : TUICallDefine.CallObserverExtraInfo) {
    console.log(`${NAME.PREFIX} onCallNotConnected ${JSON.stringify({ callID: callId, mediaType: covertMediaType(mediaType), reason, userID: userId, info })}`);
    this.listener('onCallNotConnected', { callID: callId, mediaType: covertMediaType(mediaType), reason, userID: userId, info });
  }

  override onUserReject(userId : string) {
    console.log(`${NAME.PREFIX} onUserReject ${JSON.stringify({ userID: userId })}`);
    this.listener('onUserReject', { userID: userId });
  }

  override onUserNoResponse(userId : string) {
    console.log(`${NAME.PREFIX} onUserNoResponse ${JSON.stringify({ userID: userId })}`);
    this.listener('onUserNoResponse', { userID: userId });
  }

  override onUserLineBusy(userId : string) {
    console.log(`${NAME.PREFIX} onUserLineBusy ${JSON.stringify({ userID: userId })}`);
    this.listener('onUserLineBusy', { userID: userId });
  }

  override onUserInviting(userId : string) {
    console.log(`${NAME.PREFIX} onCallBegin ${JSON.stringify({ userID: userId })}`);
    this.listener('onUserInviting', { userID: userId });
  }

  override onUserJoin(userId : string) {
    console.log(`${NAME.PREFIX} onUserJoin ${JSON.stringify({ userID: userId })}`);
    this.listener('onUserJoin', { userID: userId });
  }

  override onUserLeave(userId : string) {
    console.log(`${NAME.PREFIX} onUserLeave ${JSON.stringify({ userID: userId })}`);
    this.listener('onUserLeave', { userID: userId });
  }

  override onUserVideoAvailable(userId : string, isVideoAvailable : boolean) {
    this.listener('onUserVideoAvailable', { userID: userId, isVideoAvailable });
  }

  override onUserAudioAvailable(userId : string, isAudioAvailable : boolean) {
    this.listener('onUserAudioAvailable', { userID: userId, isAudioAvailable });
  }

  override onUserVoiceVolumeChanged(volumeMap : Map<string, Int>) {
    this.listener('onUserVoiceVolumeChanged', { volumeMap });
  }

  override onUserNetworkQualityChanged(networkQualityList : List<TUICommonDefine.NetworkQualityInfo>) {
    this.listener('onUserNetworkQualityChanged', { networkQualityList });
  }

  override onKickedOffline() {
    console.log(`${NAME.PREFIX} onKickedOfflines`);
    this.listener('onKickedOffline', {});
  }

  override onUserSigExpired() {
    console.log(`${NAME.PREFIX} onUserSigExpired`);
    this.listener('onUserSigExpired', {});
  }
}

export class TFloatWindowObserver extends FloatWindowObserver {
  private listener : (eventType : string, data : any) => void;

  constructor(options : ICallObserve) {
    super();
    this.listener = options.listener;
    console.log(`${NAME.PREFIX} TFloatWindowObserver ok`);
  }

  override onFloatWindowClick() {
    this.listener('onFloatWindowClick', {});
  }
}
